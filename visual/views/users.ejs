<!DOCTYPE html>
<meta charset="utf-8">
  <script src="https://d3js.org/d3.v5.js" charset="utf-8"></script>
<style>

.link {
  stroke: #aaa;
}

.node text {
stroke:#333;
cursos:pointer;
}

.node circle{
stroke:#fff;
stroke-width:3px;
fill:#555;
}

</style>
<body>

  <div id="container">
    <h1>Graph</h1>
    <div id="graph"></div>
  </div>
<script>
// set the dimensions and margins of the graph
document.addEventListener('DOMContentLoaded', function(e) {
var margin = {
    top: 10,
    right: 30,
    bottom: 30,
    left: 40
  },
  width = 400 - margin.left - margin.right,
  height = 400 - margin.top - margin.bottom;

const svg1 = d3.select("body").select("#graph").append("svg")
  .attr("width", width)
  .attr("height", height);
const svg = svg1
  .append('g')
  .attr('transform', `translate(${margin.left}, ${margin.top})`);

var graph = <%- JSON.stringify(graph) %>;
var links = graph.edges;
var nodes = graph.nodes;
var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

// Initialize the links
var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(links)
    .enter().append("line")
    .style("stroke", "palevioletred")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

// Initialize the nodes

var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("g")
    .data(nodes)
    .enter().append("g");
 var circles = node.append("circle")
      .attr("r", 5)
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

 // var node =  svg.append("g")
 //      .attr("stroke", "#fff")
 //      .attr("stroke-width", 1.5)
 //    .selectAll("circle")
 //    .data(nodes)
 //    .join("circle")
 //      .attr("r", 5)
 //       .call(d3.drag()
 //          .on("start", dragstarted)
 //          .on("drag", dragged)
 //          .on("end", dragended));

// var circles = node.append("circle")
//       .attr("r", 5)
//       .call(d3.drag()
//           .on("start", dragstarted)
//           .on("drag", dragged)
//           .on("end", dragended));

var lables = node.append("text")
  .text(function(d) {
    return d.name;
  })
  .attr('x', 6)
  .attr('y', 3)
  .style("font-size", "8px");

node.append("title")
  .text(d => d.name);

simulation
  .nodes(nodes)
  .on("tick", ticked);

simulation.force("link")
  .links(links);

function ticked() {
  link
    .attr("x1", function(d) {
      return d.source.x;
    })
    .attr("y1", function(d) {
      return d.source.y;
    })
    .attr("x2", function(d) {
      return d.target.x;
    })
    .attr("y2", function(d) {
      return d.target.y;
    });

  node
    .attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    })
}

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}
  });
</script>
</body>
</html>

